# Multi-stage production Dockerfile for Public Health Intelligence Platform
FROM python:3.11-slim as base

# Build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Metadata
LABEL maintainer="PHIP Team" \
    org.label-schema.build-date=$BUILD_DATE \
    org.label-schema.name="phip-backend" \
    org.label-schema.description="Public Health Intelligence Platform Backend" \
    org.label-schema.version=$VERSION \
    org.label-schema.vcs-ref=$VCS_REF \
    org.label-schema.schema-version="1.0"

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    FLASK_ENV=production \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libc6-dev \
    libpq-dev \
    libmagic1 \
    curl \
    wget \
    gnupg \
    ca-certificates \
    gosu \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Create app user and group
RUN groupadd -r appgroup && useradd -r -g appgroup -d /app -s /bin/bash appuser

# Set work directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .

# Create virtual environment and install dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies
RUN pip install --upgrade pip setuptools wheel && \
    pip install -r requirements.txt

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p data uploads logs instance && \
    chown -R appuser:appgroup /app && \
    chmod +x scripts/*.sh || true

# Remove development files
RUN rm -rf tests/ .git/ .pytest_cache/ __pycache__/ \
    *.pyc .env.example .gitignore README.md

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Default command
CMD ["gunicorn", "--config", "gunicorn.conf.py", "src.main:app"]

# --- Production stage ---
FROM base as production

# Install production server
USER root
RUN pip install gunicorn[gevent]==21.2.0

# Copy production configuration
COPY config/gunicorn.conf.py /app/
COPY scripts/entrypoint-production.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Switch back to app user
USER appuser

# Production entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# --- Development stage ---
FROM base as development

ENV FLASK_ENV=development

# Install development dependencies
COPY requirements-dev.txt .
RUN pip install -r requirements-dev.txt

# Copy development configuration
COPY scripts/entrypoint-development.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Development entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["python", "run.py"]

# --- Testing stage ---
FROM base as testing

ENV FLASK_ENV=testing

# Install test dependencies
COPY requirements-test.txt .
RUN pip install -r requirements-test.txt

# Copy test files
COPY tests/ tests/
COPY pytest.ini .

# Test command
CMD ["pytest", "-v", "--cov=src", "--cov-report=html", "--cov-report=term"]

# --- Worker stage ---
FROM production as worker

# Worker-specific configuration
ENV C_FORCE_ROOT=1

# Default worker command
CMD ["celery", "-A", "src.main.celery", "worker", "--loglevel=INFO", "--concurrency=4"]

# --- Beat stage ---
FROM production as beat

# Beat-specific configuration
ENV C_FORCE_ROOT=1

# Default beat command
CMD ["celery", "-A", "src.main.celery", "beat", "--loglevel=INFO"]

# --- Flower stage ---
FROM production as flower

# Flower monitoring
CMD ["celery", "-A", "src.main.celery", "flower", "--port=5555"]